'''
fft 计算大数乘法
'''
'''
author: niejiadong
date: 2020/04/26
'''

'''
12 x 345 = 4140
(2 + p)(5 + 4p + 3p^2) = (10 + 13p + 10p^2 + 3p^3) = 10 + 130 + 1000 + 3000 = 4140
'''

from scipy.fftpack import fft, ifft
import numpy as np

a = np.array([2,1])
b = np.array([5,4,3])

############## 转换到频域 ###############
f_a = fft(a, 8)
f_b = fft(b, 8)
print(f_a)
# [3.        -0.j         2.70710678-0.70710678j 2.        -1.j
#  1.29289322-0.70710678j 1.        -0.j         1.29289322+0.70710678j
#  2.        +1.j         2.70710678+0.70710678j]
print(f_b)
# [12.        -0.j          7.82842712-5.82842712j  2.        -4.j
#   2.17157288+0.17157288j  4.        -0.j          2.17157288-0.17157288j
#   2.        +4.j          7.82842712+5.82842712j]


############ 卷积变为频域的乘法 ###########
f_c = f_a * f_b
print(f_c)
# [36.         -0.j        17.07106781-21.3137085j  0.        -10.j
#   2.92893219 -1.3137085j  4.         -0.j         2.92893219 +1.3137085j
#   0.        +10.j        17.07106781+21.3137085j]


############ 频域变换回来 #################
c = ifft(f_c)
print(c)
# [1.0000000e+01+0.j 1.3000000e+01+0.j 1.0000000e+01+0.j 3.0000000e+00+0.j
#  0.0000000e+00+0.j 0.0000000e+00+0.j 0.0000000e+00-0.j 4.4408921e-16+0.j]

c = np.round(c.real).astype(int)
print(c)
# [10 13 10  3  0  0  0  0]
